module AirMan
  ( Model
  , Action(NextFrame)
  , init
  , update
  , view
  ) where

-- <MegaAirMan> Modules
import Shared exposing (Frame)

-- Elm Modules
import Effects exposing (Effects)
import Html exposing (Html, div)
import Html.Attributes exposing (classList)
import Keyboard
import Signal exposing (Signal)
import Time exposing (Time)

{-| This module controls all actions and all state associated with the Air Man
sprite. <Arena> initializes <AirMan>.

# Model
@docs ...

# Update
@docs ...

# view
@docs ...
-}


-----------
-- MODEL --
-----------

{-| Represents the 2D position of a sprite. <x> and <y> are the coordinate
position. <vx> and <vy> are the velocity along the axes. <dir> is the direction
this sprite faces.

    -- At any given moment in time, a jumping sprite may look like this.
    AirMan : Model
    AirMan =
      { ani = {...}
      , x = 0.0
      , y = 10.7
      , vx = 0.5
      , vy = 6.0
      , dir = Right
      }
-}
type alias Model =
  { ani : AnimationState
  , x : Float
  , y : Float
  , vx : Float
  , vy : Float
  , dir : Direction
  }


{-| This model holds all animation state associated with the Air Man sprite.
-}
type alias AnimationState =
  { currentFrameNumber : Int
  , currentFrame : Frame
  , stand : Frame
  , jump : Frame
  , shootF1 : Frame
  , shootF2 : Frame
  , shootF3 : Frame
  }


{-| Represents the direction this sprite faces within a 2D coordinate system.

    leftDirection : Direction
    leftDirection = Left
-}
type Direction
  = Left
  | Right


{-| Create the initial sprite model.
-}
init : (Model, Effects a)
init =
  Shared.noFx <|
  { ani =
      { currentFrameNumber = 1
      , currentFrame = "icon-mm2-airman-stand"
      , stand = "icon-mm2-airman-stand"
      , jump = "icon-mm2-airman-jump"
      , shootF1 = "icon-mm2-airman-shoot1"
      , shootF2 = "icon-mm2-airman-shoot2"
      , shootF3 = "icon-mm2-airman-shoot3"
      }
  , x = 0.0
  , y = 0.0
  , vx = 0.0
  , vy = 0.0
  , dir = Right
  }


{-| Represents Signal output from the Keyboard module. Positive values indicate
up and right. Negative values indicate bottom and left. Zero is no input. See
<Keyboard> for further explanation.
-}
type alias ArrowKeys =
  { x : Int
  , y : Int
  }


{-| Represents a time measurement delta generated by the Signal section.
-}
type alias DeltaTime
  = Float


------------
-- UPDATE --
------------

{-| Trigger the next animation frame in the desired cycle with this Action type.
-}
type Action
  = HandleInput (DeltaTime, ArrowKeys)
  | NextFrame
  | Stand
  | Jump
  | Shoot


{-| Updates state to cycle to the next animation frame.
-}
updateAnimationState : AnimationState -> Action -> AnimationState
updateAnimationState ani action =
  case action of
    Jump ->
      { ani | currentFrameNumber = 1
            , currentFrame = ani.jump
      }

    Shoot ->
      let
        nextNumber = 1 + (ani.currentFrameNumber % 10)
        nextFrame =
          case nextNumber of
            10 ->
              ani.shootF3
              
            _ ->
              if
                nextNumber % 2 == 0
              then
                ani.shootF2
              else
                ani.shootF1

      in
        { ani | currentFrameNumber = nextNumber
              , currentFrame = nextFrame
        }

    _ -> -- Default to the stand image.
      { ani | currentFrameNumber = 1
            , currentFrame = ani.stand
      }


{-| Update the Air Man sprite model in response to Signal input.
-- TODO Incorporate direction, translate movements, shoot timing
-}
update : Action -> Model -> (Model, Effects a)
update action model =
  Shared.noFx <|
  case action of
    NextFrame ->
      -- TODO Testing
      { model | ani = updateAnimationState model.ani Shoot }

    Jump ->
      { model | ani = updateAnimationState model.ani action }

    Shoot ->
      { model | ani = updateAnimationState model.ani action }

    _ ->
      { model | ani = updateAnimationState model.ani action }


----------
-- VIEW --
----------

{-|
-}
view : Signal.Address Action -> Model -> Html
view address model =
  div -- Air Man sprite.
    [ classList
        [ ("abs", True)
        , ("btm", True)
        , ("icon", True)
        , (model.ani.currentFrame, True)
        , ("flip-x", model.dir == Right)
        ]
    ]
    [ -- Tornado sprites.
    ]


-------------
-- SIGNALS --
-------------

{-| Samples keyboard input to determine elapsed time and key presses.
-}
sampleKeyboardInput : Signal Action
sampleKeyboardInput =
  let
    delta = Signal.map (\t -> t/20) (Time.fps 30)
  in
    Signal.sampleOn delta (Signal.map2 (,) delta Keyboard.arrows)
    |> Signal.map (\(dt, kb) -> HandleInput (dt, kb))
