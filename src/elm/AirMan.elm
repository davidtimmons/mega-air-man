module AirMan
  ( init
  , update
  , view
  , Direction(..)
  ) where

import Html exposing (..)
import Html.Attributes exposing (..)
import Keyboard exposing (arrows)
import Signal
--import Time exposing (Time, fps)

{-| This module controls all actions and all state associated with the Air Man
sprite. <Main.elm> initializes <AirMan> within this program.

# Model
@docs Model, Direction, DeltaTime, KeyboardInput, init

# Update
@docs Action, update

# view
@docs view
-}


-----------
-- MODEL --
-----------

{-| Represents the 2D position of a sprite. <x> and <y> are the coordinate
position. <vx> and <vy> are the velocity along the axes. <dir> is the direction
this sprite faces.

    -- At any given moment in time, a jumping sprite may look like this.
    AirMan : Model
    AirMan =
      { x = 0.0
      , y = 10.7
      , vx = 0.5
      , vy = 6.0
      , dir = Left
      }
-}
type alias Model =
  { x : Float
  , y : Float
  , vx : Float
  , vy : Float
  , dir : Direction
  }

{-| Represents the direction a sprite faces within a 2D coordinate system.

    leftDirection : Direction
    leftDirection = Left
-}
type Direction
  = Left
  | Right

{-| Represents a time measurement delta generated by the <input> function.
-}
type alias DeltaTime
  = Float

{-| Represents Signal output from the Keyboard module. Positive values indicate
up and right. Negative values indicate bottom and left. Zero is no input. See
<Keyboard> for further explanation.
-}
type alias KeyboardInput =
  { x : Int
  , y : Int
  }

{-| Create the initial sprite model. See <Main.elm> for the calling function.
-}
init : Float -> Float -> Float -> Float -> Direction -> Model
init x y vx vy dir =
  { x = x
  , y = y
  , vx = vx
  , vy = vy
  , dir = dir
  }


------------
-- UPDATE --
------------

{-| Represents the data that will update the model.
-}
type alias Action
  = (DeltaTime, KeyboardInput)

{-| Update the sprite model in response to Signal ouput.
-}
update : Action -> Model -> Model
update (delta, keys) model =
  model


----------
-- VIEW --
----------

{-|
-}
view : Signal.Address Action -> Model -> Html
view address model =
  div []
    [ img [style [("border-color", "red")]] []
    ]

----------
-- SIGNALS (Temp: Move to <Main.elm>?)
----------

{-
input : Signal (Float, Keys)
input =
  let
    delta = Signal.map (\t -> t/20) (fps 30)
  in
    Signal.sampleOn delta (Signal.map2 (,) delta Keyboard.arrows)
--}
